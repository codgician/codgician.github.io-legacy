<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>codgician</title>
    <link>https://codgician.me/zh-hans/</link>
    <description>Recent content on codgician</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.</copyright>
    <lastBuildDate>Sun, 10 May 2020 16:29:10 +0800</lastBuildDate><atom:link href="https://codgician.me/zh-hans/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CSAPP: Attack Lab</title>
      <link>https://codgician.me/zh-hans/posts/2020/05/csapp-attack-lab/</link>
      <pubDate>Sun, 10 May 2020 16:29:10 +0800</pubDate>
      
      <guid>https://codgician.me/zh-hans/posts/2020/05/csapp-attack-lab/</guid>
      <description>实验内容 本实验是 CSAPP:3e 一书的配套实验之一，相关资料如下： 实验文件 实验要求 在本次实验中，我们将试着对给定的可在 Linux 下运行的二进制文件进行缓冲区溢出攻</description>
    </item>
    
    <item>
      <title>Offline Algorithms</title>
      <link>https://codgician.me/zh-hans/icpc/templates/offline-algorithms/</link>
      <pubDate>Mon, 18 Nov 2019 09:10:17 +0800</pubDate>
      
      <guid>https://codgician.me/zh-hans/icpc/templates/offline-algorithms/</guid>
      <description>莫队算法 普通莫队 typedef struct _Query { int id, qLeftPt, qRightPt; } Query; Query qArr[SIZE]; int arr[SIZE], ans[SIZE], len, qNum, pos[SIZE]; int main() { /* Some code here... */ // Partition int blockSize = sqrt(len); for (int i = 0; i &amp;lt; len; i++) pos[i] = i / blockSize; // Sort sort(qArr + 0, qArr + qNum, [](const Query &amp;amp; fst, const Query &amp;amp; snd)</description>
    </item>
    
    <item>
      <title>Graph Theory</title>
      <link>https://codgician.me/zh-hans/icpc/templates/graph-theory/</link>
      <pubDate>Mon, 18 Nov 2019 09:02:35 +0800</pubDate>
      
      <guid>https://codgician.me/zh-hans/icpc/templates/graph-theory/</guid>
      <description>最短路 Dijkstra long long int dist[VERTEX_SIZE]; bool vis[VERTEX_SIZE]; void dijkstra(int startPt) { for (int i = 0; i &amp;lt; vertexNum; i++) vis[i] = false, dist[i] = LLONG_MAX; priority_queue&amp;lt;pair&amp;lt;long long int, int&amp;gt; &amp;gt; pq; pq.push(make_pair(0, startPt)); dist[startPt] = 0; while (!pq.empty()) { int cntPt = pq.top().second; pq.pop(); if (vis[cntPt]) continue; vis[cntPt] = true; for (int i = head[cntPt]; i != -1; i = edges[i].next) { int nextPt = edges[i].to;</description>
    </item>
    
    <item>
      <title>Luogu P3943: 星空</title>
      <link>https://codgician.me/zh-hans/posts/2019/02/luogu-p3943/</link>
      <pubDate>Tue, 05 Feb 2019 11:20:57 +0800</pubDate>
      
      <guid>https://codgician.me/zh-hans/posts/2019/02/luogu-p3943/</guid>
      <description>题面 现有一个长度为 $n$ 的灯泡序列，其中 $k$ 个位置上的灯泡是熄灭的，其余的是点亮的。我们可以进行 $m$ 种操作，而第 $i$ 种操作是选定任意长度为 $b_i$ 的连续灯泡</description>
    </item>
    
    <item>
      <title>ICPC 2018 亚洲区域赛北京站游记</title>
      <link>https://codgician.me/zh-hans/posts/2018/11/icpc-2018-asia-beijing-regional-travel-notes/</link>
      <pubDate>Mon, 26 Nov 2018 22:58:00 +0800</pubDate>
      
      <guid>https://codgician.me/zh-hans/posts/2018/11/icpc-2018-asia-beijing-regional-travel-notes/</guid>
      <description>Day 0 早早地到达了高铁站…… 北京之行时长竟然有 $4$ 天，真是令人感到舒适…… 前面几天一直在瞎搞各种线段树，包括什么势能线段树 (aka 吉司机线段树)、多 tag</description>
    </item>
    
    <item>
      <title>ICPC 2018 亚洲区域赛南京站游记</title>
      <link>https://codgician.me/zh-hans/posts/2018/10/icpc-2018-asia-nanjing-regional-travel-notes/</link>
      <pubDate>Tue, 16 Oct 2018 22:50:35 +0800</pubDate>
      
      <guid>https://codgician.me/zh-hans/posts/2018/10/icpc-2018-asia-nanjing-regional-travel-notes/</guid>
      <description>Day 0 国庆六场模拟赛场场自闭，导致比赛前一周状态不佳。抱着打铁的心态随便整理了一下模板。本来打算当天就整理好并打出来的结果转念一想去南航找复印</description>
    </item>
    
    <item>
      <title>浅谈无旋转 Treap</title>
      <link>https://codgician.me/zh-hans/posts/2018/07/treap-without-rotations/</link>
      <pubDate>Sat, 28 Jul 2018 15:15:01 +0800</pubDate>
      
      <guid>https://codgician.me/zh-hans/posts/2018/07/treap-without-rotations/</guid>
      <description>简介 Treap = Tree + Heap。Treap 是一种弱平衡的二叉搜索树。 相较普通的二叉搜索树，平衡二叉树与之最显著的区别就是后者是 “平衡的”，即采取了一些</description>
    </item>
    
    <item>
      <title>CCPC 2018 湘潭邀请赛游记</title>
      <link>https://codgician.me/zh-hans/posts/2018/05/ccpc-2018-xiangtan-travel-notes/</link>
      <pubDate>Wed, 16 May 2018 13:19:35 +0800</pubDate>
      
      <guid>https://codgician.me/zh-hans/posts/2018/05/ccpc-2018-xiangtan-travel-notes/</guid>
      <description>Day 0 打印了 Claris 巨佬的模板（虽然看不懂），顺便打印了几个自己整理的常用模板（然而最后全都没用上）。 下午收拾东西，不知道哪里一抽就把小黄兔和蛤乐器</description>
    </item>
    
    <item>
      <title>CCPC 2018 湘潭邀请赛游记</title>
      <link>https://codgician.me/zh-hans/posts/2018/05/ccpc-2018-xiangtan-travel-notes/</link>
      <pubDate>Wed, 16 May 2018 13:19:35 +0800</pubDate>
      
      <guid>https://codgician.me/zh-hans/posts/2018/05/ccpc-2018-xiangtan-travel-notes/</guid>
      <description>Day 0 打印了 Claris 巨佬的模板（虽然看不懂），顺便打印了几个自己整理的常用模板（然而最后全都没用上）。 下午收拾东西，不知道哪里一抽就把小黄兔和蛤乐器</description>
    </item>
    
    <item>
      <title>乱谈整型与浮点</title>
      <link>https://codgician.me/zh-hans/posts/2017/08/on-int-and-float/</link>
      <pubDate>Fri, 18 Aug 2017 22:43:10 +0800</pubDate>
      
      <guid>https://codgician.me/zh-hans/posts/2017/08/on-int-and-float/</guid>
      <description>前言 前几天好友终于也入了 C/C++ 的邪教，问起了几个浮点相关的问题，让我终于意识到深陷现代语言泥潭的我早已忘却这些富有趣味但又基础地不能在基础的知识</description>
    </item>
    
  </channel>
</rss>
